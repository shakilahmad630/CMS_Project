package com.vivatech.controller.cms;

import com.vivatech.model.cms.Contentproperties;

import com.vivatech.repository.cms.ContentpropertiesRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@CrossOrigin(origins = "*", allowedHeaders = "*")
@Controller	// This means that this class is a Controller
@RequestMapping(path = "/contentproperties") // This means URL's start with /demo (after Application path)
public class ContentpropertiesController {

    @Autowired // This means to get the bean called contentpropertiesRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ContentpropertiesRepository contentpropertiesRepository;

    @PostMapping(path = "/add") // Map ONLY POST Requests
    public @ResponseBody
    String addNewContentproperties(@RequestBody Contentproperties in) {
		// @ResponseBody means the returned String is the response, not a view name
        // @RequestBody means it is a parameter from the GET or POST request

        Contentproperties n = new Contentproperties();
        n.setId(in.getId());
        n.setSongname(in.getSongname());
        n.setAlbumname(in.getAlbumname());
        n.setSingername(in.getSingername());
        n.setSongwriter(in.getSongwriter());
        n.setMusicdirector(in.getMusicdirector());
        n.setMusiclabel(in.getMusiclabel());
        n.setProducername(in.getProducername());
        n.setPublishername(in.getPublishername());
        n.setDescription(in.getDescription());
        n.setContentlanguage(in.getContentlanguage());
        n.setCopyright(in.getCopyright());
        n.setYearofrelease(in.getYearofrelease());
        n.setCopyrightfrom(in.getCopyrightfrom());
        n.setCopyrightto(in.getCopyrightto());
        n.setCpcategory1(in.getCpcategory1());
        n.setSynopsistxt(in.getSynopsistxt());
        n.setLyricstxt(in.getLyricstxt());
        n.setAudiofile(in.getAudiofile());
        n.setPreview(in.getPreview());
        n.setImagefile(in.getImagefile());
        n.setThumbnailimage(in.getThumbnailimage());
        n.setCpcategory2(in.getCpcategory2());
        n.setCpcategory3(in.getCpcategory3());
        n.setCpcategory4(in.getCpcategory4());
        n.setContentstatus(in.getContentstatus());
        n.setSongid(in.getSongid());
        n.setSongstatus(in.getSongstatus());
        n.setTonetag(in.getTonetag());
	// n.setRadioplaystartdate(in.getradioplaystartdate());
        // n.setRadioplayenddate(in.getradioplayenddate());
        //n.setStarttime(in.getStarttime());
        //n.setEndtime(in.getEndtime());

        contentpropertiesRepository.save(n);
        return "Saved";
    }

    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<Contentproperties> getAllContentproperties() {
        // This returns a JSON or XML with the languages
        return contentpropertiesRepository.findAll();
    }
}
