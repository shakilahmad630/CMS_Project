package com.vivatech.controller.cms;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.vivatech.config.Response;
import com.vivatech.dto.cms.Contentreportdto;
import com.vivatech.dto.cms.SearchContent;
import com.vivatech.dto.cms.Stats;
import com.vivatech.model.cms.ContentDTO;
import com.vivatech.model.cms.Contentproperties;
import com.vivatech.model.cms.Contents;
import com.vivatech.model.cms.Contenttypes;
import com.vivatech.model.cms.FormDataWithFile;
import com.vivatech.model.cms.Usercontents;
import com.vivatech.model.cms.UsercontentsIdentity;
import com.vivatech.model.cms.Users;
import com.vivatech.repository.cms.ContentpropertiesRepository;
import com.vivatech.repository.cms.ContentsRepository;
import com.vivatech.repository.cms.ContenttypesRepository;
import com.vivatech.repository.cms.UsercontentsRepository;
import com.vivatech.repository.cms.UsersRepository;
import com.vivatech.storage.StorageService;
import java.math.BigInteger;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;

@CrossOrigin(origins = "*", allowedHeaders = "*")
@Controller // This means that this class is a Controller
@RequestMapping(path = "/contents") // This means URL's start with /demo (after Application path)
public class ContentsController {

    @Autowired // This means to get the bean called contentsRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ContentsRepository contentsRepository;

    @Autowired // This means to get the bean called contentsRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UsercontentsRepository usercontentsRepository;

    @Autowired // This means to get the bean called contentsRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ContentpropertiesRepository contentpropertiesRepository;

    @Autowired // This means to get the bean called contentsRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UsersRepository usersRepository;

    private static final Logger logger = LoggerFactory.getLogger(ContentsController.class);

    @Autowired // This means to get the bean called StorageService
    // Which is auto-generated by Spring, we will use it to handle the data
    private StorageService storageService;

    @Autowired
    private ContenttypesRepository contenttypesRepository;

    @PostMapping(path = "/add") // Map ONLY POST Requests
    public @ResponseBody
    Response addNewContents(@ModelAttribute FormDataWithFile formDataWithFile) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        UUID uuid = UUID.randomUUID();
        try {
            ContentDTO incontentdto = new ObjectMapper().readValue(formDataWithFile.contentdto, ContentDTO.class);

            // add new content
            addNewContentsSub(incontentdto, uuid.toString());
            logger.info("after addNewContentsSub");

            // add in content properties
            String newSongId = addNeworUpdateContentproperties(incontentdto, uuid.toString(), true);
            logger.info("newSongId : " + newSongId);

            // add in user contents
            addNewUserContents(incontentdto.userid, uuid.toString());

            // save files
            storeFiles(newSongId, incontentdto, formDataWithFile);
            // String CPid = newSongId.substring(4, 7);
            // Integer contenttypeid =
            // Integer.parseInt(incontentdto.contents.getContenttypeid());
            // logger.warn(formDataWithFile.audiofile.getOriginalFilename());
            //
            // String audioext = "_audio.mp3";
            // String previewaudioext = "_previewaudio.mp3";
            // if ((contenttypeid >= 4 && contenttypeid <= 7)) {//radio content types
            // audioext = ".wav";
            // previewaudioext = "_preview.wav";
            //
            // String contenttype =
            // getContenttype(incontentdto.contents.getContenttypeid());
            //
            // // audio file
            // storageService.store(formDataWithFile.audiofile, contenttype + File.separator
            // + incontentdto.userid + File.separator
            // + newSongId + File.separator + newSongId + audioext);
            // // preview audio file
            // storageService.store(formDataWithFile.previewfile, contenttype +
            // File.separator + incontentdto.userid + File.separator
            // + newSongId + File.separator + newSongId + previewaudioext);
            // } else {
            //
            // // audio file
            // storageService.store(formDataWithFile.audiofile, CPid + File.separator +
            // incontentdto.userid + File.separator
            // + newSongId + File.separator + newSongId + audioext);
            // // preview audio file
            // storageService.store(formDataWithFile.previewfile, CPid + File.separator +
            // incontentdto.userid + File.separator
            // + newSongId + File.separator + newSongId + previewaudioext);
            // // image file
            // if (formDataWithFile.imagefile != null) {
            // storageService.store(formDataWithFile.imagefile, CPid + File.separator +
            // incontentdto.userid + File.separator
            // + newSongId + File.separator + newSongId + "_image.jpg");
            // }
            //
            // // thumbnail image file
            // if (formDataWithFile.thumbnailimagefile != null) {
            // storageService.store(formDataWithFile.thumbnailimagefile, CPid +
            // File.separator + incontentdto.userid
            // + File.separator + newSongId + File.separator + newSongId +
            // "_thumbnailimage.jpg");
            // }
            //
            // // synopsis file
            // if (formDataWithFile.synopsisfile != null) {
            // storageService.store(formDataWithFile.synopsisfile, CPid + File.separator +
            // incontentdto.userid + File.separator
            // + newSongId + File.separator + newSongId + "_synopsis.txt");
            // }
            //
            // // Lyrics file
            // if (formDataWithFile.lyricsfile != null) {
            // storageService.store(formDataWithFile.lyricsfile, CPid + File.separator +
            // incontentdto.userid + File.separator
            // + newSongId + File.separator + newSongId + "_lyrics.txt");
            // }
            // }

            // Save Sequennce no in users table
        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
            return new Response("", e.getMessage());

        }

        return new Response("SUCCESS", "");
    }

    @PostMapping(path = "/view")
    public @ResponseBody
    Iterable<ContentDTO> getAllContents(@RequestBody SearchContent in) {
        // This returns a JSON or XML with the users
        List<ContentDTO> contentlist = new ArrayList<ContentDTO>();

        // try {
        String userid = in.getUserid();
        List<Object[]> objectlist = new ArrayList<Object[]>();
        objectlist = contentsRepository.getContentsforUserid(userid, in.getLanguageid(), in.getContenttypeid(),
                in.getContentstatus());

        for (Object[] obj : objectlist) {
            ContentDTO oContentDTO = new ContentDTO();
            oContentDTO.contentproperties = new Contentproperties();
            oContentDTO.contents = new Contents();

            oContentDTO.contentproperties.setId((String) obj[0]);
            oContentDTO.contentproperties.setSongname((String) obj[1]);
            oContentDTO.contentproperties.setAlbumname((String) obj[2]);
            oContentDTO.contentproperties.setSingername((String) obj[3]);
            oContentDTO.contentproperties.setSongwriter((String) obj[4]);
            oContentDTO.contentproperties.setMusicdirector((String) obj[5]);
            oContentDTO.contentproperties.setMusiclabel((String) obj[6]);
            oContentDTO.contentproperties.setProducername((String) obj[7]);
            oContentDTO.contentproperties.setPublishername((String) obj[8]);
            oContentDTO.contentproperties.setDescription((String) obj[9]);
            oContentDTO.contentproperties.setContentlanguage((String) obj[10]);
            oContentDTO.contentproperties.setCopyright((String) obj[11]);
            oContentDTO.contentproperties.setYearofrelease((String) obj[12]);

            Timestamp timestamp = (Timestamp) obj[13];
            if (timestamp != null) {
                LocalDateTime dt = (timestamp).toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();
                oContentDTO.contentproperties.setCopyrightfrom(dt);
            }

            Timestamp timestamp1 = (Timestamp) obj[14];
            if (timestamp1 != null) {
                LocalDateTime dt1 = (timestamp1).toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();
                oContentDTO.contentproperties.setCopyrightto(dt1);
            }

            oContentDTO.contentproperties.setCpcategory1((String) obj[15]);
            // oContentDTO.contentproperties.setSynopsistxt((String) obj[16]);
            // oContentDTO.contentproperties.setLyricstxt((String) obj[17]);
            // oContentDTO.contentproperties.setAudiofile((String) obj[18]);
            // oContentDTO.contentproperties.setPreview((String) obj[19]);
            // oContentDTO.contentproperties.setImagefile((String) obj[20]);
            // oContentDTO.contentproperties.setThumbnailimage((String) obj[21]);
            oContentDTO.contentproperties.setCpcategory2((String) obj[22]);
            oContentDTO.contentproperties.setCpcategory3((String) obj[23]);
            oContentDTO.contentproperties.setCpcategory4((String) obj[24]);
            oContentDTO.contentproperties.setContentstatus((String) obj[25]);
            oContentDTO.contentproperties.setSongid((String) obj[26]);
            oContentDTO.contentproperties.setSongstatus((String) obj[27]);
            oContentDTO.contentproperties.setTonetag((String) obj[28]);
            // createdby
            // createddate
            // modifiedby
            // modifieddate
            oContentDTO.contentproperties.setStarttime((String) obj[33]);
            oContentDTO.contentproperties.setEndtime((String) obj[34]);
            oContentDTO.contentproperties.setLanguageid((String) obj[35]);
            oContentDTO.contentproperties.setContenttypeid((String) obj[36]);
            oContentDTO.contentproperties.setLocationid((String) obj[37]);
            oContentDTO.contents.setId((String) obj[0]);
            oContentDTO.contents.setLanguageid((String) obj[35]);
            oContentDTO.contents.setContenttypeid((String) obj[36]);
            oContentDTO.contents.setLocationid((String) obj[37]);

            oContentDTO.userid = userid;

            // File Handling
            // Synopsis File
            String filepath = (String) obj[16];
            String synopsisfile = MvcUriComponentsBuilder
                    .fromMethodName(FileUploadController.class, "serveFile", filepath).build().toUri().toString();
            oContentDTO.contentproperties.setSynopsistxt(synopsisfile);

            // Lyrics File
            filepath = (String) obj[17];
            String lyricsfile = MvcUriComponentsBuilder
                    .fromMethodName(FileUploadController.class, "serveFile", filepath).build().toUri().toString();
            oContentDTO.contentproperties.setLyricstxt(lyricsfile);

            // Audio File
            filepath = (String) obj[18];
            String audiofile = MvcUriComponentsBuilder.fromMethodName(FileUploadController.class, "serveFile", filepath)
                    .build().toUri().toString();
            oContentDTO.contentproperties.setAudiofile(audiofile);

            // Preview File
            filepath = (String) obj[19];
            String previewfile = MvcUriComponentsBuilder
                    .fromMethodName(FileUploadController.class, "serveFile", filepath).build().toUri().toString();
            oContentDTO.contentproperties.setPreview(previewfile);

            // Image file
            filepath = (String) obj[20];
            String imagefile = MvcUriComponentsBuilder.fromMethodName(FileUploadController.class, "serveFile", filepath)
                    .build().toUri().toString();
            oContentDTO.contentproperties.setImagefile(imagefile);

            // Thumbnail Image file
            filepath = (String) obj[21];
            String thimagefile = MvcUriComponentsBuilder
                    .fromMethodName(FileUploadController.class, "serveFile", filepath).build().toUri().toString();
            oContentDTO.contentproperties.setThumbnailimage(thimagefile);
            //

            contentlist.add(oContentDTO);
        }

        // }
        // catch (Exception e) {
        // // TODO: handle exception
        // logger.info("getAllContents : " + e.getMessage());
        // }
        return contentlist;

    }

    // @GetMapping(path = "/getallcontentsattached")
    // public @ResponseBody Iterable<ContentDTO> getAllContentsAttached(@RequestBody
    // String userid) {
    // This returns a JSON or XML with the users
    // List<ContentDTO> contentlist = new ArrayList<ContentDTO>();
    // List<Object[]> objectlist = contentsRepository.findById(id);
    // for (Object[] obj : objectlist) {
    // ContentDTO oContentDTO = new ContentDTO();
    // oContentDTO.set
    // contentlist.add(oUserDTO);
    // }
    // return contentlist;
    // }
    private void storeFiles(String newSongId, ContentDTO incontentdto, FormDataWithFile formDataWithFile) {
        String CPid = newSongId.substring(4, 7);
        Integer contenttypeid = Integer.parseInt(incontentdto.contents.getContenttypeid());
//        logger.warn(formDataWithFile.audiofile.getOriginalFilename());

        String audioext = "_audio.mp3";
        String previewaudioext = "_previewaudio.mp3";
        if ((contenttypeid >= 4 && contenttypeid <= 7)) {// radio content types
            audioext = ".wav";
            previewaudioext = "_preview.wav";

            String contenttype = getContenttype(incontentdto.contents.getContenttypeid());

            // audio file
            if (formDataWithFile.audiofile != null) {
                storageService.store(formDataWithFile.audiofile, contenttype + File.separator + incontentdto.userid
                        + File.separator + newSongId + File.separator + newSongId + audioext);
            }
            // preview audio file
            if (formDataWithFile.previewfile != null) {
                storageService.store(formDataWithFile.previewfile, contenttype + File.separator + incontentdto.userid
                        + File.separator + newSongId + File.separator + newSongId + previewaudioext);
            }
        } else {

            // audio file
            if (formDataWithFile.audiofile != null) {
                storageService.store(formDataWithFile.audiofile, CPid + File.separator + incontentdto.userid
                        + File.separator + newSongId + File.separator + newSongId + audioext);
            }
            // preview audio file
            if (formDataWithFile.previewfile != null) {
                storageService.store(formDataWithFile.previewfile, CPid + File.separator + incontentdto.userid
                        + File.separator + newSongId + File.separator + newSongId + previewaudioext);
            }
            // image file
            if (formDataWithFile.imagefile != null) {
                storageService.store(formDataWithFile.imagefile, CPid + File.separator + incontentdto.userid
                        + File.separator + newSongId + File.separator + newSongId + "_image.jpg");
            }

            // thumbnail image file
            if (formDataWithFile.thumbnailimagefile != null) {
                storageService.store(formDataWithFile.thumbnailimagefile, CPid + File.separator + incontentdto.userid
                        + File.separator + newSongId + File.separator + newSongId + "_thumbnailimage.jpg");
            }

            // synopsis file
            if (formDataWithFile.synopsisfile != null) {
                storageService.store(formDataWithFile.synopsisfile, CPid + File.separator + incontentdto.userid
                        + File.separator + newSongId + File.separator + newSongId + "_synopsis.txt");
            }

            // Lyrics file
            if (formDataWithFile.lyricsfile != null) {
                storageService.store(formDataWithFile.lyricsfile, CPid + File.separator + incontentdto.userid
                        + File.separator + newSongId + File.separator + newSongId + "_lyrics.txt");
            }
        }

    }

    @PostMapping(path = "/update") // Map ONLY POST Requests
    public @ResponseBody
    Response updateContents(@ModelAttribute FormDataWithFile formDataWithFile) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        try {
            ContentDTO incontentdto = new ObjectMapper().readValue(formDataWithFile.contentdto, ContentDTO.class);
            logger.info("updateContents : after incontentdto ");
            // contents
            updateContentssub(incontentdto);

            // contentproperties
            String newSongId = addNeworUpdateContentproperties(incontentdto, "", false);

            // save files
            storeFiles(newSongId, incontentdto, formDataWithFile);
            // String CPid = newSongId.substring(4, 7);
            // //logger.warn(formDataWithFile.audiofile.getOriginalFilename());
            // // audio file
            // logger.warn("formDataWithFile.audiofile : " + formDataWithFile.audiofile);
            // String contenttype =
            // getContenttype(incontentdto.contents.getContenttypeid());
            // Integer contenttypeid =
            // Integer.parseInt(incontentdto.contents.getContenttypeid());
            //
            //
            // if ((contenttypeid >= 4 && contenttypeid <= 7)) {//radio content types
            // // audio file
            // if (formDataWithFile.audiofile != null) {
            // storageService.store(formDataWithFile.audiofile, contenttype + File.separator
            // + incontentdto.userid + File.separator
            // + newSongId + File.separator + newSongId + ".wav");
            // }
            // // preview audio file
            // if (formDataWithFile.previewfile != null) {
            // storageService.store(formDataWithFile.previewfile, contenttype +
            // File.separator + incontentdto.userid + File.separator
            // + newSongId + File.separator + newSongId + "_preview.wav");
            // }
            // } else {
            //
            // if (formDataWithFile.audiofile != null) {
            // storageService.store(formDataWithFile.audiofile, CPid + File.separator +
            // incontentdto.userid + File.separator
            // + newSongId + File.separator + newSongId + "_audio.mp3");
            // }
            // // preview audio file
            // if (formDataWithFile.previewfile != null) {
            // storageService.store(formDataWithFile.previewfile, CPid + File.separator +
            // incontentdto.userid + File.separator
            // + newSongId + File.separator + newSongId + "_previewaudio.mp3");
            // }
            // // image file
            // if (formDataWithFile.imagefile != null) {
            // storageService.store(formDataWithFile.imagefile, CPid + File.separator +
            // incontentdto.userid + File.separator
            // + newSongId + File.separator + newSongId + "_image.jpg");
            // }
            // // thumbnail image file
            // if (formDataWithFile.thumbnailimagefile != null) {
            // storageService.store(formDataWithFile.thumbnailimagefile, CPid +
            // File.separator + incontentdto.userid
            // + File.separator + newSongId + File.separator + newSongId +
            // "_thumbnailimage.jpg");
            // }
            // // synopsis file
            // if (formDataWithFile.synopsisfile != null) {
            // storageService.store(formDataWithFile.synopsisfile, CPid + File.separator +
            // incontentdto.userid + File.separator
            // + newSongId + File.separator + newSongId + "_synopsis.txt");
            // }
            // // Lyrics file
            // if (formDataWithFile.lyricsfile != null) {
            // storageService.store(formDataWithFile.lyricsfile, CPid + File.separator +
            // incontentdto.userid + File.separator
            // + newSongId + File.separator + newSongId + "_lyrics.txt");
            // }
            //
            // }
        } catch (Exception e) {
            e.printStackTrace();
            // TODO: handle exception
            return new Response("", e.getMessage());
        }

        return new Response("SUCCESS", "");

    }

    @PostMapping(path = "/delete") // Map ONLY POST Requests
    public @ResponseBody
    Response deletecontents(@RequestBody String contentid) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestBody means it is a parameter from the GET or POST request

        try {
            // usercontents
            Usercontents ut = usercontentsRepository.findByUsercontentsIdentityContentid(contentid);
            usercontentsRepository.delete(ut);

            // contentproperties
            contentpropertiesRepository.deleteById(contentid);

            // contents
            contentsRepository.deleteById(contentid);

        } catch (Exception e) {
            // TODO: handle exception
            return new Response("", e.getMessage());
        }

        return new Response("SUCCESS", "");
        // return ut;

    }

    public String addNeworUpdateContentproperties(ContentDTO incontentdto, String contentid, boolean isnew) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestBody means it is a parameter from the GET or POST request

        logger.info("addNeworUpdateContentproperties");

        Contentproperties in = incontentdto.contentproperties;

        Contentproperties n = new Contentproperties();
        if (isnew == false) {
            Optional<Contentproperties> contentproperties = contentpropertiesRepository
                    .findById(incontentdto.contentproperties.getId());
            n = contentproperties.get();
        }

        if (isnew) {
            n.setId(contentid);
        }

        n.setLanguageid(incontentdto.contents.getLanguageid());
        n.setContenttypeid(incontentdto.contents.getContenttypeid());
        n.setLocationid(incontentdto.contents.getLocationid());

        n.setSongname(in.getSongname());
        n.setAlbumname(in.getAlbumname());
        n.setSingername(in.getSingername());
        n.setSongwriter(in.getSongwriter());
        n.setMusicdirector(in.getMusicdirector());
        n.setMusiclabel(in.getMusiclabel());
        n.setProducername(in.getProducername());
        n.setPublishername(in.getPublishername());
        n.setDescription(in.getDescription());
        n.setContentlanguage(in.getContentlanguage());
        n.setCopyright(in.getCopyright());
        n.setYearofrelease(in.getYearofrelease());
        n.setCopyrightfrom(in.getCopyrightfrom());
        n.setCopyrightto(in.getCopyrightto());
        n.setCpcategory1(in.getCpcategory1());
        n.setCpcategory2(in.getCpcategory2());
        n.setCpcategory3(in.getCpcategory3());
        n.setCpcategory4(in.getCpcategory4());
        n.setContentstatus(in.getContentstatus());
        n.setStarttime(in.getStarttime());
        n.setEndtime(in.getEndtime());

        String newSongid;
        Integer contenttypeid = Integer.parseInt(incontentdto.contents.getContenttypeid());
        if (isnew == false) {
            newSongid = in.getSongid();
        } else {
            if ((contenttypeid >= 4 && contenttypeid <= 7)) {// radio content type
                newSongid = getNewSongIdForRadioTypes(incontentdto.contents.getContenttypeid(), in.getCopyrightfrom(),
                        in.getCopyrightto(), in.getStarttime(), in.getEndtime());

            } else {
                newSongid = getNewSongId(incontentdto.userid, in.getContentlanguage(),
                        incontentdto.contents.getLocationid(), in.getYearofrelease());
            }
        }
        logger.info("add or upadte newSongId : " + newSongid);
        n.setSongid(newSongid);
        n.setSongstatus(in.getSongstatus());

        String CPid = newSongid.substring(4, 7);
        String Tonetag = CPid + newSongid.substring(9, 14);

        if ((contenttypeid >= 4 && contenttypeid <= 7)) {// radio content types
            String contenttype = getContenttype(incontentdto.contents.getContenttypeid());
            n.setAudiofile(contenttype + File.separator + incontentdto.userid + File.separator + newSongid
                    + File.separator + newSongid + ".wav");
            n.setPreview(contenttype + File.separator + incontentdto.userid + File.separator + newSongid
                    + File.separator + newSongid + "_preview.wav");
            Tonetag = contenttypeid + newSongid.substring(9, 14);
        } else {

            n.setAudiofile(CPid + File.separator + incontentdto.userid + File.separator + newSongid + File.separator
                    + newSongid + "_audio.mp3");
            n.setPreview(CPid + File.separator + incontentdto.userid + File.separator + newSongid + File.separator
                    + newSongid + "_previewaudio.mp3");
            n.setImagefile(CPid + File.separator + incontentdto.userid + File.separator + newSongid + File.separator
                    + newSongid + "_image.jpg");
            n.setThumbnailimage(CPid + File.separator + incontentdto.userid + File.separator + newSongid
                    + File.separator + newSongid + "_thumbnailimage.jpg");
            n.setSynopsistxt(CPid + File.separator + incontentdto.userid + File.separator + newSongid + File.separator
                    + newSongid + "_synopsis.txt");
            n.setLyricstxt(CPid + File.separator + incontentdto.userid + File.separator + newSongid + File.separator
                    + newSongid + "_lyrics.txt");
        }

        n.setTonetag(Tonetag);

        contentpropertiesRepository.save(n);

        logger.info("addNeworUpdateContentproperties - newSongid : " + newSongid);

        return newSongid;
    }

    public String addNewUserContents(String userid, String contentid) {
        Usercontents n = new Usercontents();
        // n.setUserid(userid);
        // n.setContentid(contentid);
        n.setUsercontentsIdentity(new UsercontentsIdentity(userid, contentid));

        usercontentsRepository.save(n);
        return "Saved";
    }

    public String addNewContentsSub(ContentDTO incontentdto, String newid) {
        Contents n = new Contents();
        n.setId(newid);// set unique id

        n.setLanguageid(incontentdto.contents.getLanguageid());
        n.setContenttypeid(incontentdto.contents.getContenttypeid());
        n.setLocationid(incontentdto.contents.getLocationid());

        contentsRepository.save(n);

        return "Saved";
    }

    public String updateContentssub(ContentDTO incontentdto) {

        Optional<Contents> contents = contentsRepository.findById(incontentdto.contents.getId());

        if (contents != null) {
            Contents n = contents.get();
            n.setLanguageid(incontentdto.contents.getLanguageid());
            n.setContenttypeid(incontentdto.contents.getContenttypeid());
            n.setLocationid(incontentdto.contents.getLocationid());

            contentsRepository.save(n);
        }

        return "Saved";
    }

    String getContenttype(String contenttypeid) {
        String contenttype = "";
        Optional<Contenttypes> oContenttypes = contenttypesRepository.findById(contenttypeid);
        if (oContenttypes.isPresent()) {
            contenttype = oContenttypes.get().getType();
        }

        return contenttype;
    }

    String getNewSongIdForRadioTypes(String contenttypeid, LocalDateTime startdate, LocalDateTime enddate,
            String starttime, String endtime) {

        String songId = "";

        String contenttype = getContenttype(contenttypeid);

        songId = contenttype + "_" + getFormattedDateString(startdate) + "_" + getFormattedDateString(enddate);

        if (starttime != null) {
            songId += ("_" + starttime.replace(":", ""));
        }

        if (endtime != null) {
            songId += ("_" + endtime.replace(":", ""));
        }

        return songId;

    }

    String getFormattedDateString(LocalDateTime startdate) {
        String formattedDate = startdate.format(DateTimeFormatter.ofPattern("dd-MM-yy"));
        formattedDate = formattedDate.replaceAll("-", "");

        return formattedDate;

    }

    String getNewSongId(String userid, String contentLanguage, String locationId, String yearofrelease) {

        List<Object[]> userroleslist = usersRepository.getrolenameAndDetailsforUserid(userid);
        logger.info("getNewSongId userroleslist : " + userroleslist.size());
        Object[] userroles = userroleslist.get(0);
        logger.info("getNewSongId  userroles : " + userroles.length);
        String rolename = (String) userroles[0];

        String cpId = "";
        String songId = "";
        String sequenceno = "";
        String CPUserid = "";

        if (rolename.equalsIgnoreCase("cptenant")) {
            logger.info("getNewSongId rolename : " + rolename.toLowerCase());
            CPUserid = userid;
            cpId = (String) userroles[1];
            sequenceno = (String) userroles[2];

        } else {// cpuser
            logger.info("getNewSongId 2 rolename : " + rolename.toLowerCase());
            List<Object[]> userdetails = usersRepository.getCPId(userid);
            Object[] userdetail = userdetails.get(0);

            cpId = (String) userdetail[0];

            sequenceno = (String) userdetail[1];
            CPUserid = (String) userdetail[2];
        }

        Integer seqintvalue = Integer.parseInt(sequenceno);
        seqintvalue++;
        sequenceno = String.format("%05d", seqintvalue);

        logger.info("getNewSongId : " + sequenceno);

        updateSequencenoforCPid(CPUserid, sequenceno);

        String contentlanuageId = getContentLanguageId(contentLanguage);

        songId = contentlanuageId + locationId + cpId + yearofrelease.substring(2) + sequenceno;

        return songId;

    }

    String getContentLanguageId(String contentLanguage) {
        String contentlanguageId = "00";
        switch (contentLanguage.toLowerCase()) {
            case "english":
                contentlanguageId = "01";
                break;
            case "hindi":
                contentlanguageId = "02";
                break;
            case "arabic":
                contentlanguageId = "03";
                break;
            case "spanish":
                contentlanguageId = "04";
                break;
            case "swedish":
                contentlanguageId = "05";
                break;
            case "corsican":
                contentlanguageId = "06";

            default:
                break;
        }

        return contentlanguageId;
    }

    void updateSequencenoforCPid(String cpuserid, String newSequenceno) {
        Optional<Users> users = usersRepository.findById(cpuserid);
        if (users != null) {
            Users cpuser = users.get();
            cpuser.setSequenceno(newSequenceno);

            usersRepository.save(cpuser);
        }

    }

    // -------DASHBOARD----
    @PostMapping(path = "/contentreport") // Map ONLY POST Requests
    public @ResponseBody
    Contentreportdto getcontentReport(@RequestBody String userid) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        Contentreportdto oContentreportdto = new Contentreportdto();
        try {

            // GEt User details
            String rolename = usersRepository.getrolenameforUserid(userid);
            // List<Object[]> userroleslist =
            // usersRepository.getrolenameAndDetailsforUserid(userid);
            // logger.info("userroles" + userid);
            //
            //
            // Object[] userroles = userroleslist.get(0);
            //
            // String rolename = (String) userroles[0];
            // End

            if (rolename.equalsIgnoreCase("CPUSER")) {// CPUSER Details
                Integer readycount = contentsRepository.getContentCountForUserForGivenStatus(userid, "READY");
                oContentreportdto.setReadycount(readycount);

                Integer publishcount = contentsRepository.getContentCountForUserForGivenStatus(userid, "PUBLISHED");
                oContentreportdto.setPublishcount(publishcount);

                Integer rejectedcount = contentsRepository.getContentCountForUserForGivenStatus(userid, "REJECTED");
                oContentreportdto.setRejectcount(rejectedcount);

                Integer expiredcount = contentsRepository.getContentCountForUserForGivenStatus(userid, "EXPIRED");
                oContentreportdto.setExpirecount(expiredcount);
                // END CPUser details
            } else if (rolename.equalsIgnoreCase("CPTENANT")) {
                Integer readycount = contentsRepository.getContentCountForUserForGivenStatus(userid, "READY");
                oContentreportdto.setReadycount(readycount);

                Integer publishcount = contentsRepository.getContentCountForUserForGivenStatus(userid, "PUBLISHED");
                oContentreportdto.setPublishcount(publishcount);

                Integer rejectedcount = contentsRepository.getContentCountForUserForGivenStatus(userid, "REJECTED");
                oContentreportdto.setRejectcount(rejectedcount);

                Integer expiredcount = contentsRepository.getContentCountForUserForGivenStatus(userid, "EXPIRED");
                oContentreportdto.setExpirecount(expiredcount);

            } else if (rolename.equalsIgnoreCase("ADMIN")) {
                Integer readycount = contentsRepository.getContentCountForUserForGivenStatus(userid, "READY");
                oContentreportdto.setReadycount(readycount);

                Integer publishcount = contentsRepository.getContentCountForUserForGivenStatus(userid, "PUBLISHED");
                oContentreportdto.setPublishcount(publishcount);

                Integer rejectedcount = contentsRepository.getContentCountForUserForGivenStatus(userid, "REJECTED");
                oContentreportdto.setRejectcount(rejectedcount);

                Integer expiredcount = contentsRepository.getContentCountForUserForGivenStatus(userid, "EXPIRED");
                oContentreportdto.setExpirecount(expiredcount);

            }

        } catch (Exception e) {
            // TODO: handle exception
            logger.error("getcontentReport : " + e.getMessage());
        }

        return oContentreportdto;

    }

    @PostMapping(path = "/contentcreatedstats") // Map ONLY POST Requests
    public @ResponseBody
    List<Stats> getContentCreatedStats(@RequestBody String userid) {
        List<Stats> oList = new ArrayList<Stats>();
        try {
            List<Object[]> objectlist = contentsRepository.getContentsCreatedinlast7days();
            for (Object[] obj : objectlist) {
                Stats ostat = new Stats();
                ostat.setDate((String) obj[0]);
                ostat.setCount(((BigInteger) obj[1]).intValue());

                oList.add(ostat);
            }
        } catch (Exception e) {
            // TODO: handle exception
            logger.error("getContentCreatedStats : " + e.getMessage());
        }
        return oList;
    }

    @PostMapping(path = "/contentexpiredstats") // Map ONLY POST Requests
    public @ResponseBody
    List<Stats> getContentExpiredStats(@RequestBody String userid) {
        List<Stats> oList = new ArrayList<Stats>();
        try {
            List<Object[]> objectlist = contentsRepository.getContentsExpiredinlast7days();
            for (Object[] obj : objectlist) {
                Stats ostat = new Stats();
                ostat.setDate((String) obj[0]);
                ostat.setCount(((BigInteger) obj[1]).intValue());

                oList.add(ostat);
            }
        } catch (Exception e) {
            // TODO: handle exception
            logger.error("getContentCreatedStats : " + e.getMessage());
        }
        return oList;
    }

}
