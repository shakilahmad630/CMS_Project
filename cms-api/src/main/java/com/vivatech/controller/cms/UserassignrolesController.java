package com.vivatech.controller.cms;

import java.util.ArrayList;
import java.util.List;

import com.vivatech.config.Response;
import com.vivatech.model.cms.UserAssignedRoleDTO;
import com.vivatech.model.cms.Userassignroles;
import com.vivatech.repository.cms.UserassignrolesRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@CrossOrigin(origins = "*", allowedHeaders = "*")
@Controller	// This means that this class is a Controller
@RequestMapping(path="/userassignroles") // This means URL's start with /demo (after Application path)
public class UserassignrolesController {
	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private UserassignrolesRepository userassignrolesRepository;

	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody Response addNewUserassignroles (@RequestBody Userassignroles in) {
		// @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request


      try {

        Userassignroles n = new Userassignroles();
        // n.setUserid(in.getUserid());
        // n.setContenttypeid(in.getContenttypeid());
        // n.setLocationid(in.getLocationid());
        n.setUserassignrolesIdentity(in.getUserassignrolesIdentity());
        n.setOperation(in.getOperation());

        userassignrolesRepository.save(n);

      } catch (Exception e) {
        //TODO: handle exception
        return new Response("", e.getMessage());
      }

    	return new Response("SUCCESS", "");
	}

	@PostMapping(path="/view")
	public @ResponseBody Iterable<UserAssignedRoleDTO> getAllUserassignroles(@RequestBody String userid) {
    // This returns a JSON or XML with the users
    List<UserAssignedRoleDTO> userlist = new ArrayList<UserAssignedRoleDTO>();
    try {
      List<Object[]>  objectlist = userassignrolesRepository.findAllUserAssignedRoles(userid);

      for (Object[] obj : objectlist) {
        UserAssignedRoleDTO oUserAssignedRoleDTO = new UserAssignedRoleDTO();
        oUserAssignedRoleDTO.setContenttype((String) obj[0]);
        oUserAssignedRoleDTO.setLocation((String) obj[1]);
        oUserAssignedRoleDTO.setOperation((String) obj[2]);
        oUserAssignedRoleDTO.setContenttypeid((String) obj[3]);
        oUserAssignedRoleDTO.setLocationid((String) obj[4]);

        userlist.add(oUserAssignedRoleDTO);
      }

    } catch (Exception e) {
      //TODO: handle exception
    }

    return userlist;

  }
  @PostMapping(path = "/delete") // Map ONLY POST Requests
  public @ResponseBody Response deleteUserAssignedRoles(@RequestBody Userassignroles in) {

    try {
      //usersassignroles
      userassignrolesRepository.delete(in);

    } catch (Exception e) {
      //TODO: handle exception
      return new Response("", e.getMessage());
    }

   return new Response("SUCCESS", "");
  }
}
