package com.vivatech.controller.cms;

import com.vivatech.config.Response;
import com.vivatech.model.cms.Categories;
import com.vivatech.repository.cms.CategoriesRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@CrossOrigin(origins = "*", allowedHeaders = "*")
@Controller // This means that this class is a Controller
@RequestMapping(path = "/categories") // This means URL's start with /demo (after Application path)
public class CategoriesController {
  @Autowired // This means to get the bean called categoriesRepository
             // Which is auto-generated by Spring, we will use it to handle the data
  private CategoriesRepository categoriesRepository;

  @PostMapping(path = "/add") // Map ONLY POST Requests
  public @ResponseBody Response addNewCategories(@RequestBody Categories in) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    try {
      categoriesRepository.save(in);

    } catch (Exception e) {
      // TODO: handle exception
      return new Response("", e.getMessage());
    }
    return new Response("SUCCESS", "");

  }

  @PostMapping(path = "/update") // Map ONLY POST Requests
  public @ResponseBody Response updateCategorie(@RequestBody Categories in) {
    try {

      categoriesRepository.save(in);

    } catch (Exception e) {
      // TODO: handle exception
      return new Response("", e.getMessage());
    }

    return new Response("SUCCESS", "");

  }

  @PostMapping(path = "/delete") // Map ONLY POST Requests
  public @ResponseBody Response deleteCategories(@RequestBody Integer id) {

    try {

      categoriesRepository.deleteById(id);

    } catch (Exception e) {

      return new Response("", e.getMessage());
    }

    return new Response("SUCCESS", "");
  }

  @GetMapping(path = "/view")
  public @ResponseBody Iterable<Categories> getAllCategories() {
    // This returns a JSON or XML with the categories
    return categoriesRepository.findAll();
  }
}
